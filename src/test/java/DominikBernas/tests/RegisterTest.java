package DominikBernas.tests;

import DominikBernas.basetest.BaseTest;
import DominikBernas.models.RegisterModel;
import DominikBernas.models.RegisterModelFaker;
import DominikBernas.pages.HomePage;
import DominikBernas.utils.RetryAnalyzer;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.List;


public class RegisterTest extends BaseTest {

    @Test(retryAnalyzer = RetryAnalyzer.class)
    public void registrationWithFaker() {
    RegisterModelFaker registerModelFaker = new RegisterModelFaker();

    LogStep("Description: Tests the registration process for a new user with data generated by Faker.");
    LogStep("Steps:" );
        LogStep(  "1. Open the ParaBank homepage. " );
            LogStep( "2. Click the Register button. " );
                LogStep( "3. Enter user data generated by Faker ");
                    LogStep( "4. Click the Register button. ");

            WebElement alert =  new HomePage(driver)
                    .registerButtonClick()
                    .registerWithFaker(registerModelFaker)
                    .getWelcome();

        LogStep("Expected Result:");
        LogStep("The user is successfully registered.");
            Assert.assertTrue(alert.isDisplayed());
            Assert.assertTrue(alert.getText().contains("Welcome"));

}

    @Test(retryAnalyzer = RetryAnalyzer.class)
    public void registrationWithUsedUsername() {
        RegisterModel registerModel = new RegisterModel();
        registerModel.setFirstName("Dominik");
        registerModel.setLastName("Bernas");
        registerModel.setAddress("Adama Mickiewicz 14/10");
        registerModel.setCity("Warszawa");
        registerModel.setState("Wielkopolski");
        registerModel.setZip("42-400");
        registerModel.setPhone("696596965");
        registerModel.setSsn("415262514536");
        registerModel.setUsername("Tester2390");
        registerModel.setPassword("Testerpass2390");

        LogStep("Description: Tests the registration attempt with a username that already exists in the system.");
        LogStep("Steps:");
            LogStep("Open the ParaBank homepage.");
                LogStep("Click the Register button.");
                    LogStep("Enter user data with an existing username (e.g., Tester2390)");

            WebElement Error =  new HomePage(driver)
                    .registerButtonClick()
                    .register(registerModel)
                    .getErrorUsernameExists();

        LogStep("Expected Result:");
            LogStep("A message 'This username already exists.' is displayed.");
        Assert.assertTrue(Error.isDisplayed());
        Assert.assertTrue(Error.getText().contains("This username already exists."));

    }

    @Test
    public void registrationWithoutData() {
        RegisterModel registerModel = new RegisterModel();
        registerModel.setFirstName("");
        registerModel.setLastName("");
        registerModel.setAddress("");
        registerModel.setCity("");
        registerModel.setState("");
        registerModel.setZip("");
        registerModel.setPhone("");
        registerModel.setSsn("");
        registerModel.setUsername("");
        registerModel.setPassword("");

        LogStep("Description: Tests the registration process for a new user with data generated by Faker.");
        LogStep("Steps:" );
                LogStep(  "1. Open the ParaBank homepage. " );
                        LogStep( "2. Click the Register button. " );
                                LogStep( "3. Click the Register button without entering any data.");



        List<WebElement> errorRequired = new HomePage(driver)
                .registerButtonClick()
                .register(registerModel)
                .errorsRequired(driver)
                .stream()
                .toList();

        LogStep("Expected Result:");
            LogStep("Error messages are displayed for each field");
        Assert.assertTrue(errorRequired.get(0).getText().contains("First name is required."));
        Assert.assertTrue(errorRequired.get(1).getText().contains("Last name is required."));
        Assert.assertTrue(errorRequired.get(2).getText().contains("Address is required."));
        Assert.assertTrue(errorRequired.get(3).getText().contains("City is required."));
        Assert.assertTrue(errorRequired.get(4).getText().contains("State is required."));
        Assert.assertTrue(errorRequired.get(5).getText().contains("Zip Code is required."));
        Assert.assertTrue(errorRequired.get(6).getText().contains("Social Security Number is required."));
        Assert.assertTrue(errorRequired.get(7).getText().contains("Username is required."));
        Assert.assertTrue(errorRequired.get(8).getText().contains("Password is required."));
        Assert.assertTrue(errorRequired.get(9).getText().contains("Password confirmation is required."));

    }

    @Test
    public void registrationWithMismatchedPasswordAndConfirmation(){
        RegisterModelFaker registerModelFaker = new RegisterModelFaker();


      LogStep("Description: Tests the registration attempt when the password and confirmation password do not match.");
      LogStep("Steps:");
        LogStep("1. Open the ParaBank homepage.");
            LogStep("2. Click the Register button.");
                LogStep("3. Enter user data:");
                    LogStep("4. Click the Register button. ");

        WebElement error =  new HomePage(driver)
                .registerButtonClick()
                .registerWithFakerConfirm(registerModelFaker)
                .getErrorRepeatedPassword();

        LogStep("Expected Result:");
            LogStep("A message 'Passwords did not match.' is displayed.");
        Assert.assertTrue(error.getText().contains("Passwords did not match."));



    }
}
